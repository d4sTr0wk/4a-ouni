; Compiled with: PIC Simulator IDE v8.55
; Microcontroller model: PIC16F877A
; Clock frequency: 4.0MHz
;
	R0L EQU 0x020
	R0H EQU 0x021
	R1L EQU 0x022
	R1H EQU 0x023
	R2L EQU 0x024
	R2H EQU 0x025
	R3L EQU 0x026
	R3H EQU 0x027
	R4L EQU 0x028
	R0HL EQU 0x020
	R1HL EQU 0x022
	R2HL EQU 0x024
	R3HL EQU 0x026
	R1HL0HL EQU 0x020
	R3HL2HL EQU 0x024
;       The address of 'display' (byte) (global) is 0x029
;       The address of 'i' (byte) (global) is 0x02A
;       The address of 'j' (byte) (global) is 0x02B
	ORG 0x0000
	BCF PCLATH,3
	BCF PCLATH,4
	GOTO L0003
	ORG 0x0004
	RETFIE
; User code start
L0003:
; 1: Dim display As Byte
; 2: Dim i As Byte
; 3: Dim j As Byte
; 4: 
; 5: OPTION_REG = 0
	BSF STATUS,RP0
	CLRF OPTION_REG
	BCF STATUS,RP0
; 6: INTCON = 0
	CLRF INTCON
; 7: TRISB = %11110000  ' Las filas (4-7) como entradas, las columnas (0-3) como salidas
	MOVLW 0xF0
	BSF STATUS,RP0
	MOVWF TRISB
; 8: TRISC = 0
	CLRF TRISC
	BCF STATUS,RP0
; 9: 
; 10: main:
L0001:
; 11: For i = 0 To 3 Step 1  ' Recorre las columnas
	CLRF 0x02A
L0004:
	MOVF 0x02A,W
	SUBLW 0x03
	BTFSS STATUS,C
	GOTO L0005
; 12: PORTB = 1 << i  ' Activa la columna i
	MOVLW 0x01
	MOVWF R0L
	CLRF R0H
	MOVF 0x02A,W
	CALL SL00
	MOVF R0L,W
	MOVWF PORTB
; 13: For j = 4 To 7 Step 1  ' Recorre las filas
	MOVLW 0x04
	MOVWF 0x02B
L0006:
	MOVF 0x02B,W
	SUBLW 0x07
	BTFSS STATUS,C
	GOTO L0007
; 14: If PORTB.j = 1 Then  ' Si la fila j está en alto, se pulsó una tecla
	MOVF PORTB,W
	MOVWF R1L
	CLRF R1H
	MOVF 0x02B,W
	MOVWF R0H
	CALL BI01
	BTFSS R1L,0
	GOTO L0008
; 15: display = i + (4 * (j - 4))
	oshonsoft_temp_b1 EQU 0x02C
	MOVLW 0x04
	SUBWF 0x02B,W
	MOVWF 0x02C
	oshonsoft_temp_b2 EQU 0x02D
	MOVLW 0x04
	MOVWF R3L
	CLRF R3H
	MOVF 0x02C,W
	MOVWF R1L
	CLRF R1H
	CALL M001
	MOVF R2L,W
	MOVWF 0x02D
	MOVF 0x02A,W
	ADDWF 0x02D,W
	MOVWF 0x029
; 16: Gosub calculadisplay
	CALL L0002
; 17: PORTC = display
	MOVF 0x029,W
	MOVWF PORTC
; 18: ' Puedes agregar un pequeño retardo aquí para evitar la detección de rebotes
; 19: Endif
L0008:
; 20: Next j
	MOVLW 0x01
	ADDWF 0x02B,F
	BTFSS STATUS,C
	GOTO L0006
L0007:
; 21: PORTB = 0  ' Desactiva la columna i
	CLRF PORTB
; 22: Next i
	MOVLW 0x01
	ADDWF 0x02A,F
	BTFSS STATUS,C
	GOTO L0004
L0005:
; 23: Goto main
	GOTO L0001
; 24: End
L0009:	GOTO L0009
; 25: calculadisplay:
L0002:
; 26: Select Case display
; 27: Case 0
	MOVF 0x029,W
	SUBLW 0x00
	BTFSS STATUS,Z
	GOTO L0010
; 28: display = %00111111
	MOVLW 0x3F
	MOVWF 0x029
; 29: Case 1
	GOTO L0011
L0010:
	MOVF 0x029,W
	SUBLW 0x01
	BTFSS STATUS,Z
	GOTO L0012
; 30: display = %00000110
	MOVLW 0x06
	MOVWF 0x029
; 31: Case 2
	GOTO L0013
L0012:
	MOVF 0x029,W
	SUBLW 0x02
	BTFSS STATUS,Z
	GOTO L0014
; 32: display = %01011011
	MOVLW 0x5B
	MOVWF 0x029
; 33: Case 3
	GOTO L0015
L0014:
	MOVF 0x029,W
	SUBLW 0x03
	BTFSS STATUS,Z
	GOTO L0016
; 34: display = %01001111
	MOVLW 0x4F
	MOVWF 0x029
; 35: Case 4
	GOTO L0017
L0016:
	MOVF 0x029,W
	SUBLW 0x04
	BTFSS STATUS,Z
	GOTO L0018
; 36: display = %01100110
	MOVLW 0x66
	MOVWF 0x029
; 37: Case 5
	GOTO L0019
L0018:
	MOVF 0x029,W
	SUBLW 0x05
	BTFSS STATUS,Z
	GOTO L0020
; 38: display = %01101101
	MOVLW 0x6D
	MOVWF 0x029
; 39: Case 6
	GOTO L0021
L0020:
	MOVF 0x029,W
	SUBLW 0x06
	BTFSS STATUS,Z
	GOTO L0022
; 40: display = %01111101
	MOVLW 0x7D
	MOVWF 0x029
; 41: Case 7
	GOTO L0023
L0022:
	MOVF 0x029,W
	SUBLW 0x07
	BTFSS STATUS,Z
	GOTO L0024
; 42: display = %00000111
	MOVLW 0x07
	MOVWF 0x029
; 43: Case 8
	GOTO L0025
L0024:
	MOVF 0x029,W
	SUBLW 0x08
	BTFSS STATUS,Z
	GOTO L0026
; 44: display = %01111111
	MOVLW 0x7F
	MOVWF 0x029
; 45: Case 9
	GOTO L0027
L0026:
	MOVF 0x029,W
	SUBLW 0x09
	BTFSS STATUS,Z
	GOTO L0028
; 46: display = %01100111
	MOVLW 0x67
	MOVWF 0x029
; 47: Case 10
	GOTO L0029
L0028:
	MOVF 0x029,W
	SUBLW 0x0A
	BTFSS STATUS,Z
	GOTO L0030
; 48: display = %01110111
	MOVLW 0x77
	MOVWF 0x029
; 49: Case 11
	GOTO L0031
L0030:
	MOVF 0x029,W
	SUBLW 0x0B
	BTFSS STATUS,Z
	GOTO L0032
; 50: display = %01111100
	MOVLW 0x7C
	MOVWF 0x029
; 51: Case 12
	GOTO L0033
L0032:
	MOVF 0x029,W
	SUBLW 0x0C
	BTFSS STATUS,Z
	GOTO L0034
; 52: display = %00111001
	MOVLW 0x39
	MOVWF 0x029
; 53: Case 13
	GOTO L0035
L0034:
	MOVF 0x029,W
	SUBLW 0x0D
	BTFSS STATUS,Z
	GOTO L0036
; 54: display = %01011110
	MOVLW 0x5E
	MOVWF 0x029
; 55: Case 14
	GOTO L0037
L0036:
	MOVF 0x029,W
	SUBLW 0x0E
	BTFSS STATUS,Z
	GOTO L0038
; 56: display = %01111001
	MOVLW 0x79
	MOVWF 0x029
; 57: Case 15
	GOTO L0039
L0038:
	MOVF 0x029,W
	SUBLW 0x0F
	BTFSS STATUS,Z
	GOTO L0040
; 58: display = %01110001
	MOVLW 0x71
	MOVWF 0x029
; 59: EndSelect
L0040:
L0039:
L0037:
L0035:
L0033:
L0031:
L0029:
L0027:
L0025:
L0023:
L0021:
L0019:
L0017:
L0015:
L0013:
L0011:
; 60: Return
	RETURN
; End of user code
L0041:	GOTO L0041
;
;
; Bit Index Routine
BI01:	INCF R0H,F
	RLF R1L,F
	RLF R1H,F
BI02:	RRF R1H,F
	RRF R1L,F
	DECFSZ R0H,F
	GOTO BI02
	RETURN
BI10:	MOVLW 0x11
	MOVWF R2L
	INCF R1H,F
	RLF R0L,F
	RLF R0H,F
	GOTO BI11
BI12:	BCF STATUS,C
	BTFSC R0L,0
	BSF STATUS,C
BI11:	RRF R0H,F
	RRF R0L,F
	DECF R1H,F
	BTFSC STATUS,Z
	CALL BI13
	DECFSZ R2L,F
	GOTO BI12
	RETURN
BI13:	BCF R0L,0
	BTFSC R1L,0
	BSF R0L,0
	RETURN
;
;
; Word Multiplication Routine
M001:	MOVLW 0x10
	MOVWF R4L
	CLRF R0H
	CLRF R0L
M002:	RRF R3H,F
	RRF R3L,F
	BTFSS STATUS,C
	GOTO M003
	MOVF R1L,W
	ADDWF R0L,F
	MOVF R1H,W
	BTFSC STATUS,C
	INCFSZ R1H,W
	ADDWF R0H,F
M003:	RRF R0H,F
	RRF R0L,F
	RRF R2H,F
	RRF R2L,F
	DECFSZ R4L,F
	GOTO M002
	RETURN
; Word ShiftLeft Routine
SL01:	BCF STATUS,C
	RLF R0L,F
	RLF R0H,F
SL00:	ADDLW 0xFF
	BTFSC STATUS,C
	GOTO SL01
	RETURN
;
;
; End of listing
	END
